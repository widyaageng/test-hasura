version: "3.6"
services:
  postgres:
    image: postgres:16-alpine
    restart: always
    volumes:
      - ./postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: postgrespw
    ports:
      - "5433:5432"
    networks:
      - hasura
  graphql-engine:
    container_name: hge
    image: hasura/graphql-engine:v2.28.0
    ports:
      - "8080:8080"
    restart: always
    labels:
      logging: "promtail"
      logging_jobname: "graphql-engine"
    networks:
      - hasura
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespw@postgres:5432/hasuradb
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      PG_DATABASE_URL: postgres://postgres:postgrespw@postgres:5432/postgres
      ## admin secret
      HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: "/srv/console-assets"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to run console offline (i.e load console assets from server instead of CDN)
      # HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets
      ## uncomment next line to set an admin secret
      # HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
      HASURA_GRAPHQL_METADATA_DEFAULTS: '{"backend_configs":{"dataconnector":{"athena":{"uri":"http://data-connector-agent:8081/api/v1/athena"},"mariadb":{"uri":"http://data-connector-agent:8081/api/v1/mariadb"},"mysql8":{"uri":"http://data-connector-agent:8081/api/v1/mysql"},"oracle":{"uri":"http://data-connector-agent:8081/api/v1/oracle"},"snowflake":{"uri":"http://data-connector-agent:8081/api/v1/snowflake"}}}}'
      # HASURA JWT CONFIG
      HASURA_GRAPHQL_JWT_SECRET: '{"type":"HS256", "key": "jwt_secret.jwt_secret.jwt_secret.jwt_secret.jwt_secret"}'
      # Enable other hasura apis, especially monitoring
      HASURA_GRAPHQL_ENABLED_APIS: 'metadata,graphql,config,metrics'
      # metrics endpoint secret
      # HASURA_GRAPHQL_METRICS_SECRET: 'secret'
      # enable query field in http-logging
      HASURA_GRAPHQL_ENABLE_METADATA_QUERY_LOGGING: "true"
    # depends_on:
    #   data-connector-agent:
    #     condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
  # data-connector-agent:
  #   image: hasura/graphql-data-connector:v2.37.0
  #   restart: always
  #   ports:
  #     - 8081:8081
  #   environment:
  #     QUARKUS_LOG_LEVEL: ERROR # FATAL, ERROR, WARN, INFO, DEBUG, TRACE
  #     ## https://quarkus.io/guides/opentelemetry#configuration-reference
  #     QUARKUS_OPENTELEMETRY_ENABLED: "false"
  #     ## QUARKUS_OPENTELEMETRY_TRACER_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8081/api/v1/athena/health"]
  #     interval: 5s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 5s
  #   networks:
  #     - hasura
  alertmanager:
    container_name: hge-alert-manager
    image: prom/alertmanager:v0.25.0
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager/config.yml/:/etc/alertmanager/alertmanager.yml
    restart: always
    deploy:
      mode: global
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.enable-lifecycle"
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ./prometheus/etc:/etc/prometheus
      - ./prometheus/prom_data:/prometheus
    networks:
      - hasura
    links:
      - alertmanager:alertmanager
    deploy:
      mode: global
  promtail:
    image: grafana/promtail:2.8.2
    deploy:
      replicas: 1
    volumes:
      - ./promtail/logs:/var/log
      - ./hasura/logs:/var/log/hasura
      - ./promtail/etc:/etc/promtail
      - ./promtail/etc/promtail-config.yml:/etc/promtail/promtail-config.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    command: -config.file=/etc/promtail/promtail-config.yml
    networks:
      - hasura
  loki:
    image: grafana/loki:2.4.0
    volumes:
      - ./loki/etc:/etc/loki
    ports:
      - "3100:3100"
    restart: unless-stopped
    command: -config.file=/etc/loki/loki-config.yml
    networks:
      - hasura
  grafana:
    image: grafana/grafana:9.3.2
    container_name: grafana
    ports:
      - 3002:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/var/lib:/var/lib/grafana
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
    networks:
      - hasura
volumes:
  db_data:
networks:
  hasura:
    driver: bridge
